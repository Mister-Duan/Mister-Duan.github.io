import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as l,b as n}from"./app-MOyuRdpr.js";const t={};function e(p,i){return a(),l("div",null,i[0]||(i[0]=[n(`<h1 id="打包macos应用" tabindex="-1"><a class="header-anchor" href="#打包macos应用"><span>打包macOS应用</span></a></h1><p>在 Electron 中，要对应用进行打包，可用方案有好几套：</p><ul><li>Electron Packager</li><li>Electron Builder</li><li>Electron Forge</li></ul><p><strong>Electron Packager</strong></p><p>Electron Packager 是一个用于 Electron 应用的命令行工具，能够帮助我们将 Electron 应用打包成各个平台（Windows, macOS, Linux）的可分发格式。它提供了很多自定义选项，比如设置图标、应用名称、版本号等。结合其他的工具，然后再使用 Electron Packager 可以很方便地为应用生成不同平台的安装包。</p><p><strong>特点：</strong></p><ul><li>它是一个简单、灵活的工具，适合于快速将Electron应用打包成可执行文件。</li><li>支持多平台打包，包括Windows、macOS和Linux。</li><li>允许自定义打包选项，如应用图标、版本号、应用名称等。</li><li>不内置生成安装程序的功能，但你可以结合其他工具（如NSIS、DMG）来创建安装包。</li></ul><p><strong>适用场景：</strong></p><ul><li>适合于小型或中型项目，对打包过程的要求不是特别复杂。</li><li>当你只需要简单地将应用打包成可执行文件，不需要额外的安装程序或更新机制时。</li></ul><p><strong>Electron Builder</strong></p><p>Electron Builder 针对大多数构建任务重新编写了自己的内部逻辑，提供了丰富的功能，包括代码签名、发布支持、文件配置、多种目标构建等。Electron Builder 不限制使用的框架和打包工具，使得可以更加灵活地进行配置和打包。</p><p><strong>特点：</strong></p><ul><li>提供了一套全面的解决方案，包括打包、创建安装程序、自动更新等。</li><li>支持广泛的安装包格式，如NSIS、AppImage、DMG、Snap等，适用于不同平台。</li><li>高度可配置，可以通过 electron-builder.yml（或 json、toml）文件详细控制打包和分发过程。</li><li>内置自动更新机制，与GitHub、S3等服务紧密集成，方便应用发布和更新。</li></ul><p><strong>适用场景：</strong></p><ul><li>适合于需要复杂打包和分发流程的中大型项目。</li><li>当你需要创建专业的安装程序，并实现自动更新功能时。</li></ul><p><strong>Electron Forge</strong></p><p>Electron Forge 因为是官方维护的产品，所以当 Electron 支持新的应用程序构建功能时，它会立即集成这些新的能力。另外，Electron Forge 专注于将现有的工具组合成一个单一的构建流程，因此更易于跟踪代码的流程和扩展。</p><p><strong>特点：</strong></p><ul><li>是一个综合性的工具，提供了开发到打包的全流程支持。</li><li>集成了Webpack、Electron Packager和Electron Builder的部分功能，提供了一站式的开发体验。</li><li>通过插件系统扩展功能，支持自定义Webpack配置、React、Vue等前端框架。</li><li>简化了开发和打包流程，通过简单的命令即可启动开发环境、打包和创建安装程序。</li></ul><p><strong>适用场景：</strong></p><ul><li>适合于所有规模的项目，特别是那些希望通过一套工具管理整个Electron应用生命周期的项目。</li><li>当你需要一个简单而全面的解决方案，不仅包括打包，还包括开发过程中的实时重新加载、打包优化等。</li></ul><p>针对上面三个工具，简单总结一下：</p><ul><li>Electron Pakcager：简单，灵活，适合于打包的基础需求。</li><li>Electron Builder：全面、功能丰富，支持各种各样的配置，适合于需要复杂打包流程和高度定制的项目。</li><li>Electron Forge：官方出品，集成度高，可以一站式管理 Electron 应用的生命周期。</li></ul><h2 id="图标" tabindex="-1"><a class="header-anchor" href="#图标"><span>图标</span></a></h2><p>关于图标这一块儿，我们又不是 UI，所以可以去找一些现成的免费的 icon 来用。</p><p>Icon Generator：https://icongenerator.net/</p><p>在该网站找到一个合适的图标，下载之后放置于你的项目对应的目录里面即可。</p><p>另外，在打包 macOS 应用的时候，需要的不仅仅是一个图标，而是**<u>一组图标</u>**，一组不同尺寸大小的图标，方便应用在不同地方显示合适尺寸的图标。</p><p>这里我们可以借助 electron-icon-builder 这个插件，可以快速的基于我们所提供的图标模板生成一套不同尺寸的图标。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> electron-icon-builder</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -D</span></span></code></pre></div><p>之后就可以在 package.json 里面配置一条脚本命令：</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;build-icon&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;electron-icon-builder --input=./assets/markdown.png --flatten&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h2 id="进行打包配置" tabindex="-1"><a class="header-anchor" href="#进行打包配置"><span>进行打包配置</span></a></h2><p>主要是配置一个名为 build 的配置项，主要需要配置的内容如下：</p><ul><li><p>appId：这个是我们应用的唯一标识符，一般会采用反向域名的格式。（假设我们应用的官网对应的地址：markdown.duyi.com，那么这里 appId 就是 com.duyi.markdown）</p><ul><li>来看一些有名的应用在 appId 上面的示例</li><li><strong>Visual Studio Code</strong>: <code>com.microsoft.vscode</code></li><li><strong>Slack</strong>: <code>com.tinyspeck.slackmacgap</code></li><li><strong>WhatsApp</strong>: <code>com.whatsapp.desktop</code></li><li><strong>Skype</strong>: <code>com.skype.skype</code></li><li><strong>Discord</strong>: <code>com.hnc.Discord</code></li></ul></li><li><p>mac 配置</p><ul><li>category：你的应用在 macOS 上面的一些类别，例如我们的 markdown 是属于工具类应用，那么在 macOS 平台，就有一个分类，名为 public.app-category.utilities <ul><li>这里来看一下其他有名的应用的分类填写示例</li><li>public.app-category.developer-tools: 开发工具，示例：Visual Studio Code, Sublime Text, Atom</li><li>public.app-category.utilities: 实用工具，示例：Alfred, CleanMyMac, DaisyDisk</li><li>public.app-category.social-networking: 社交网络，示例：Slack, WhatsApp Desktop, Telegram</li><li>public.app-category.music: 音乐，示例：Spotify, Apple Music</li><li>public.app-category.productivity: 生产力，示例：Microsoft Office Suite, Notion, Evernote</li></ul></li><li>target：对应的是要打包的目标格式，值为一个数组，数组里面的值经常填写的为 dmg 和 pkg</li></ul></li><li><p>dmg 格式相关配置</p><ul><li>title：打包成 dmg 格式时，磁盘映像对应的标题</li><li>icon：对应的就是一组 icon 的目录</li><li>background：dmg 窗口的背景图路径</li><li>window：dmg 窗口的大小，通过 width 和 height 来进行指定</li><li>contents：指定 dmg 窗口里面，应用和目录具体显示的位置。</li></ul></li><li><p>pkg 格式相关配置</p><ul><li>installLocation：指定 pkg 安装包在进行安装的时候，将应用安装到的具体位置，一般也是 /Applications 这个位置</li></ul></li></ul><p>更多详细的关于 electron-builder 的配置信息，可以参阅：https://www.electron.build/index.html</p><p>下面是我们针对此次项目打包所做的配置信息，如下：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;build&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;appId&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;com.duyi.markdown&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;productName&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Markdown Editor&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;mac&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;category&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;public.app-category.utilities&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;target&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;dmg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;pkg&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;dmg&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;title&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Markdown Editor&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;icon&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;./icons&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;background&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;./assets/background.jpeg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;window&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;width&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 660</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;height&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 400</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;contents&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;x&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 180</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;y&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 170</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;x&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 480</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;y&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 170</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;type&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;link&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;path&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/Applications&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;pkg&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;installLocation&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/Applications&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>build 这个配置完成之后，我们又可以在 package.json 中添加一条脚本命令：</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;build&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;electron-builder&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>记得要安装一下 electron-builder</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> electron-builder</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -D</span></span></code></pre></div><p>接下来运行 npm run build 就可以成功打包，注意打包的时候，有两个信息值得注意：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>skipped macOS application code signing  reason=cannot find valid &quot;Developer ID Application&quot; identity or custom non-Apple code signing certificate, it could cause some undefined behaviour, e.g. macOS localized description not visible, see https://electron.build/code-signing allIdentities=     0 identities found</span></span></code></pre></div><p>这里的提示信息表示在打包的过程中，跳过了代码签名的验证。</p><p>要解决这个问题，你需要有一个有效的 Apple 开发者证书，然后需要执行如下的步骤：</p><ol><li><strong>加入苹果开发者计划</strong>：如果还没有，你需要加入苹果开发者计划。这通常涉及到一些费用。</li><li><strong>创建并下载证书</strong>：登录到你的苹果开发者账户，然后在证书、标识符和配置文件部分创建一个新的“Developer ID Application”证书。创建并下载这个证书到你的电脑。</li><li><strong>安装证书到钥匙串</strong>：双击下载的证书文件，它会自动添加到你的钥匙串访问中。这样，electron-builder 就能在打包应用程序时使用这个证书了。</li><li><strong>在 electron-builder 配置中指定证书</strong>：在你的 <code>electron-builder</code> 配置文件中（通常是 <code>package.json</code> 中的 <code>build</code> 部分），确保正确设置了代码签名的配置。例如，你可以在配置中指定证书的名称或位置。</li></ol><div class="language-json" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;mac&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;category&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;public.app-category.utilities&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;target&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dmg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;zip&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;identity&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Developer ID Application: [你的开发者名]&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><ol start="5"><li><strong>重新打包应用程序</strong>：完成上述步骤后，再次使用 electron-builder 打包你的应用程序。这次应该不会出现之前的提示，因为 electron-builder 现在能找到并使用你的开发者 ID 证书进行代码签名了。</li></ol><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Detected arm64 process, HFS+ is unavailable. Creating dmg with APFS - supports Mac OSX 10.12+</span></span></code></pre></div><p>这个不是错误，这个仅仅是一个提示信息，告诉你在新的 arm 芯片的 macOS 里面，不再支持 HFS+ 这种文件格式系统。</p><h2 id="打包生成文件说明" tabindex="-1"><a class="header-anchor" href="#打包生成文件说明"><span>打包生成文件说明</span></a></h2><ul><li>Markdown Editor-1.0.0-arm64.dmg.blockmap：这个文件是和 dmg 文件相关的 map 文件，该文件主要的作用是为了支持增量更新。</li><li>com.duyi.markdown.plist：这是一个属性列表文件，通常用于 macOS 程序存储一些配置信息，例如应用程序的标识符、版本信息、安全权限等。</li><li>builder-debug.yml：通常是记录 electron-builder 详细的构建过程的日志信息。</li><li>builder-effective-config.yaml：该文件包含了在使用 electron-builder进行打包的时候，实际所使用的配置信息。也就是说，electron-builder 有一个默认的基础配置，然后结合我们所给的 build 配置，最终所生成的，实际所用的配置。</li></ul><h1 id="打包windows应用" tabindex="-1"><a class="header-anchor" href="#打包windows应用"><span>打包windows应用</span></a></h1><p>打包windows应用基本上和上节课介绍的打包 macOS应用大同小异，但是有一些注意点：</p><ol><li>在打包 windows 应用的时候，需要填写 author 字段。</li><li>关于图标，对应的是一个具体的 ico 格式的文件，而非一组文件</li><li>nsis 配置打包出来就是 exe 文件，对应的常见配置项： <ul><li>oneClick：false <ul><li>表示是否需要一键式安装程序，当你设置为 true 的时候，安装包在进行安装的时候，就不会给用户提供相应的选项（用户组的选择、安装路径的选择），全部按照默认配置去安装。</li></ul></li><li>allowElevation：true <ul><li>安装程序是否在需要的时候，能够请求提升权限 <ul><li>true：表示安装包在进行安装的时候，如果遇到权限不足的情况，那么会向用户请求提升权限。</li><li>false：表示安装包在进行安装的时候，如果遇到权限不足的场景，直接安装失败。</li></ul></li></ul></li><li>allowToChangeInstallationDirectory：true <ul><li>布尔类型，如果是 true，表示允许用户在安装的过程中修改安装路径。</li></ul></li><li>createDesktopShortcut：true <ul><li>是否创建桌面快捷方式</li></ul></li><li>createStartMenuShortcut：true <ul><li>是否在 windows 系统的开始菜单创建快捷方式</li></ul></li><li>shortcutName：string <ul><li>快捷方式显示的名称</li></ul></li></ul></li></ol>`,56)]))}const k=s(t,[["render",e],["__file","11.打包应用.html.vue"]]),o=JSON.parse('{"path":"/code/electron/11.%E6%89%93%E5%8C%85%E5%BA%94%E7%94%A8.html","title":"打包macOS应用","lang":"zh-CN","frontmatter":{"description":"打包macOS应用 在 Electron 中，要对应用进行打包，可用方案有好几套： Electron Packager Electron Builder Electron Forge Electron Packager Electron Packager 是一个用于 Electron 应用的命令行工具，能够帮助我们将 Electron 应用打包成各个平...","head":[["meta",{"property":"og:url","content":"https://mister-duan.github.io/code/electron/11.%E6%89%93%E5%8C%85%E5%BA%94%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"Mister.Duan"}],["meta",{"property":"og:title","content":"打包macOS应用"}],["meta",{"property":"og:description","content":"打包macOS应用 在 Electron 中，要对应用进行打包，可用方案有好几套： Electron Packager Electron Builder Electron Forge Electron Packager Electron Packager 是一个用于 Electron 应用的命令行工具，能够帮助我们将 Electron 应用打包成各个平..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-23T13:01:24.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-23T13:01:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"打包macOS应用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-23T13:01:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mister.Duan\\",\\"url\\":\\"https://mister-duan.github.io\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-duan.github.io/atom.xml","title":"Mister.Duan Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-duan.github.io/feed.json","title":"Mister.Duan JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-duan.github.io/rss.xml","title":"Mister.Duan RSS Feed"}]],"date":"2024-12-23T13:01:24.000Z"},"headers":[{"level":2,"title":"图标","slug":"图标","link":"#图标","children":[]},{"level":2,"title":"进行打包配置","slug":"进行打包配置","link":"#进行打包配置","children":[]},{"level":2,"title":"打包生成文件说明","slug":"打包生成文件说明","link":"#打包生成文件说明","children":[]}],"git":{"createdTime":1734958884000,"updatedTime":1734958884000,"contributors":[{"name":"dss","email":"duanshuaishuai@pharmcube.com","commits":1}]},"readingTime":{"minutes":8.77,"words":2630},"filePathRelative":"code/electron/11.打包应用.md","localizedDate":"2024年12月23日","excerpt":"","autoDesc":true}');export{k as comp,o as data};
