import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as t,b as a}from"./app-Dvme7Era.js";const l={};function n(p,i){return e(),t("div",null,i[0]||(i[0]=[a(`<h1 id="窗口" tabindex="-1"><a class="header-anchor" href="#窗口"><span>窗口</span></a></h1><p>几乎所有包含图形界面的操作系统都是以窗口为基础构建各自的用户界面的。系统内小到一个计算器，大到一个复杂的业务系统，都是基于窗口而创建的。如果开发人员要开发一个有良好用户体验的 <em>GUI</em> 应用，势必会在窗口的控制上下足功夫。</p><p>Electron 中的窗口由 BrowserWindow 对象来创建，可以配置的属性多达几十个，这里我们将介绍一些比较常用的属性，以及一些比较常见的需求。</p><p>主要包含以下内容：</p><ul><li>窗口相关配置</li><li>组合窗口</li><li>窗口的层级</li></ul><h2 id="窗口相关配置" tabindex="-1"><a class="header-anchor" href="#窗口相关配置"><span>窗口相关配置</span></a></h2><p>这一块儿基本上都是传递给 BrowserWindow 的配置项。</p><p><strong>基础属性</strong></p><ul><li>maxWidth：设置窗口的最大宽度</li><li>minWidth：设置窗口的最小宽度</li><li>maxHeight：设置窗口的最大高度</li><li>minHeight：设置窗口的最小高度</li><li>resizeable：是否可以改变大小，当设置 resizeable 为 false 之后，代表不可缩放，前面所设置的 maxWidth ... 这些就没有意义了</li><li>moveable：是否可以移动</li></ul><p><strong>窗口位置</strong></p><p>默认窗口出现在屏幕的位置是在正中间，但是我们可以通过 x、y 属性来控制窗口出现在屏幕的位置</p><ul><li>x：控制窗口在屏幕的横向坐标</li><li>y：控制窗口在屏幕的纵向坐标</li></ul><p><strong>标题栏文本和图标</strong></p><p>关于窗口的标题栏，实际上是可以在多个地方设置的。</p><p>既然可以在多个地方进行设置，那么这里自然会涉及到一个优先级的问题。优先级从高到低依次：</p><ul><li>HTML文档的 title</li><li>BrowserWindow 里面的 title 属性</li><li>package.json 里面的 name</li><li>Electron 默认值：Electron</li></ul><p>除了标题栏文本，我们还可以设置对应的图标：</p><ul><li>icon：设置标题栏的图标，一般来讲是 ico 格式</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建窗口方法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createWindow</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> win</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BrowserWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    icon</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">__dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;logo.ico&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  win</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">loadFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;window/index.html&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre></div><p><strong>标题栏、菜单栏和边框</strong></p><p>默认我们所创建的窗口，是有标题栏、菜单栏以及边框的，不过这个也是能够控制的。通过 frame 配置项来决定是否要显示。</p><ul><li>frame：true/false 默认值是 true</li></ul><h2 id="组合窗口" tabindex="-1"><a class="header-anchor" href="#组合窗口"><span>组合窗口</span></a></h2><p>桌面应用有些时候是有多个窗口的，多个窗口彼此之间是相互独立，也就是说，假设我关闭了一个窗口，对另外一个窗口是没有影响的。</p><p>但是在有一些场景中，多个窗口之间存在一定程度的联动，例如两个窗口存在父窗口和子窗口之间的关系，父窗口关闭之后，子窗口也一并被关闭掉了。</p><p>在 Electron 中，类似这样的需求可以非常简单的被实现，Electron 提供了父子窗口的概念，通过 parent 来指定一个窗口的父窗口。</p><p>当窗口之间形成了父子关系之后，两个窗口在行为上就会有一定的联系：</p><ul><li>子窗口可以相对于父窗口的位置来定位</li><li>父窗口在移动的时候，子窗口也跟着移动</li><li>父窗口关闭了，子窗口也应该一并被关闭掉</li><li>.....</li></ul><h2 id="窗口的层级" tabindex="-1"><a class="header-anchor" href="#窗口的层级"><span>窗口的层级</span></a></h2><p>当我们创建多个窗口的时候，默认情况下最后面创建的窗口，就在越上层。但是如果两个窗口是独立的话，那么当用户点击对应的窗口的时候，被点击的窗口会处于最上层。</p><p>但是在某些场景下，我们就是需要置顶某一些窗口，有两种方式可以办到：</p><ul><li>alwaysOnTop：true/false <ul><li>该配置属性虽然也能够置顶窗口，但是没有办法进行更新细粒度的设置</li></ul></li><li>window.setAlwaysOnTop(flag, level, relativeLevel)：该方法可以进行一个更细粒度的控制 <ul><li>flag：一个布尔值，用于设置窗口是否始终位于顶部。如果为 true，窗口将始终保持在最前面；如果为 false，则取消这一设置</li><li>level（可选）：一个字符串，指定窗口相对于其他窗口的层次。常用的值包括 &#39;normal&#39;, &#39;floating&#39;, &#39;torn-off-menu&#39;, &#39;modal-panel&#39;, &#39;main-menu&#39;, &#39;status&#39;, &#39;pop-up-menu&#39;, &#39;screen-saver&#39; 等。这个参数在不同的操作系统上可能会有不同的行为。</li><li>relativeLevel（可选）：一个整数，用于在设置了 level 的情况下进一步微调窗口层次。</li></ul></li></ul>`,32)]))}const o=s(l,[["render",n],["__file","07.窗口基础知识.html.vue"]]),k=JSON.parse('{"path":"/code/electron/07.%E7%AA%97%E5%8F%A3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html","title":"窗口基础知识","lang":"zh-CN","frontmatter":{"title":"窗口基础知识","icon":"Dxuanzhuan","date":"2024-12-17T00:00:00.000Z","category":"Electron","head":[["meta",{"name":"keywords","content":"Electron|桌面端"}],["meta",{"property":"og:url","content":"https://mister-duan.github.io/code/electron/07.%E7%AA%97%E5%8F%A3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html"}],["meta",{"property":"og:site_name","content":"Mister.Duan"}],["meta",{"property":"og:title","content":"窗口基础知识"}],["meta",{"property":"og:description","content":"窗口 几乎所有包含图形界面的操作系统都是以窗口为基础构建各自的用户界面的。系统内小到一个计算器，大到一个复杂的业务系统，都是基于窗口而创建的。如果开发人员要开发一个有良好用户体验的 GUI 应用，势必会在窗口的控制上下足功夫。 Electron 中的窗口由 BrowserWindow 对象来创建，可以配置的属性多达几十个，这里我们将介绍一些比较常用的属..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-20T15:36:43.000Z"}],["meta",{"property":"article:published_time","content":"2024-12-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-20T15:36:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"窗口基础知识\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-20T15:36:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mister.Duan\\",\\"url\\":\\"https://mister-duan.github.io\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-duan.github.io/atom.xml","title":"Mister.Duan Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-duan.github.io/feed.json","title":"Mister.Duan JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-duan.github.io/rss.xml","title":"Mister.Duan RSS Feed"}]],"description":"窗口 几乎所有包含图形界面的操作系统都是以窗口为基础构建各自的用户界面的。系统内小到一个计算器，大到一个复杂的业务系统，都是基于窗口而创建的。如果开发人员要开发一个有良好用户体验的 GUI 应用，势必会在窗口的控制上下足功夫。 Electron 中的窗口由 BrowserWindow 对象来创建，可以配置的属性多达几十个，这里我们将介绍一些比较常用的属..."},"headers":[{"level":2,"title":"窗口相关配置","slug":"窗口相关配置","link":"#窗口相关配置","children":[]},{"level":2,"title":"组合窗口","slug":"组合窗口","link":"#组合窗口","children":[]},{"level":2,"title":"窗口的层级","slug":"窗口的层级","link":"#窗口的层级","children":[]}],"git":{"createdTime":1734532803000,"updatedTime":1734709003000,"contributors":[{"name":"dss","email":"duanshuaishuai@pharmcube.com","commits":3}]},"readingTime":{"minutes":3.81,"words":1144},"filePathRelative":"code/electron/07.窗口基础知识.md","localizedDate":"2024年12月17日","excerpt":"","autoDesc":true}');export{o as comp,k as data};
